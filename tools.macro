" ======================
" load all of the macros
" ======================
" You may have noticed that before each macro was a line with: = reg ?
" We can use those lines to automatically load all of the macros in this file
" into the appropriate registers.

= reg l (for load)
o:vsplit /tmp/run-file:let @a=""l:g/^= reg /y Ah"apdk:%!wc -l"nye:let @a=""l:g/^= reg /.,+1y Ah"apGoggdjO0wwylj0:y D2"CRj"iddO@i0"nP"rdd@r:q!

=BEGIN
  -> set up a working window
o:vsplit /tmp/run-file

  -> get count of number of macros
:let @a=""                -> Clear out reg a
l:g/^= reg /y A         -> yank all the '= reg' lines (and the ones after them) into a.
h"ap                      -> paste those reg lines into the working file
dk                          -> trim out empty line
:%!wc -l                  -> pipe the lines to wc -l
"nye                        -> yank the result into reg n

  -> copy the macros to the working space
:let @a=""                -> Clear out reg a
l:g/^= reg /.,+1y A     -> yank all the '= reg' lines (and the ones after them) into a.
h"ap                      -> paste those reg lines into the working file
Go                        -> add an empty line at the bottom so the macro doesn't error out
ggdj                        -> clear out two empty lines that were a side effect

  -> write out sub macro i
O                           -> start writing
0wwyl                       -> grap which reg to write to
j0:y D2"CRj             -> yank the macro into the above reg
                          -> stop writing
"idd                        -> copy it into i

  -> run sub macro r, which will repeat i, n times
O@i0"nP"rdd               -> write it
@r                          -> call it

  -> close the file
:q!

=END



" ===============
" compile a macro
" ===============
" Takes one of the breakdowns (selected in visual mode) and copy it
" to the default register.

= reg k (for compile)
?^= reg [a-z]\>/^=BEGIN\s*$jV/^=END\s*$komtyGpmwVG:s/\s\+->.*//'wVG:j!dd't?^= regpk0ww"rylo"yyhh"rp"rdd@rk


=BEGIN

 -> Select the components of the macro in visual mode
?^= reg [a-z]\> -> jump back the begining of the register definition
/^=BEGIN\s*$    -> jump forward to the beginning of the macro
jV/^=END\s*$k   -> begin visual mode and go down to before the end of the definition

 -> Strip out comments and format the macro
omt               -> Mark the top of the visual selection
yGp               -> Yank the selected area and put it at the bottom of the file
mwVG              -> Mark where we are, select to the bottom of the file
:s/\s\+->.*//   -> remove non-comment parts of the macros
'wVG:j!         -> go back to the mark, join together the lines without spaces

  -> Load the macro into the appropriate register
dd't              -> dd the macro and go back the the beginning
?^= regp        -> jump back to the label for the reg, put the macro
k0ww"ryl          -> yank register name into r
o"yyhh"rp"rdd   -> write out a macro to yank compile macro and put it in r
@rk               -> call it and move back to the register

=END
