" ===================
" A very simple macro
" ===================

= reg s (for simple)
foa hi there

Breakdown:
fo            -> go forward to an 'o'
a hi there  -> append ' hi there' and escape

" =========================
" Wrapping macros in macros
" =========================

= reg r (for repeat)
0@sj

Breakdown:
0  -> go to the beginning of the line
@s -> execute macro s
j  -> then go to the next line

" ===========================
" Simple self modifying macro
" ===========================

= reg m (for modify)
ggdG1Ohello 1"mptOw"mdd

Breakdown:
ggdG          -> delete the entire file
1Ohello 1   -> one time, enter the line 'hello 1'
"mp           -> put this macro
tO          -> find and increment the first number
w           -> find and increment the second number
"mdd          -> put the newly modified macro back into reg m.

" NOTE:
" You might not get the results you expect if you run it multiple times.
" The macro runs however many times you called, but only with the version
" of the macro as it existed when you typed @m. Calling from another macro
" works fine, however.

= reg n (for wanting to make a Number of runs)
@m

" =========================
" A Macro with Conditionals
" =========================
" This command chooses the yanks the appropriate macro into reg a
" (for action), and then performs it

= reg p (for program)
0y$l/^":f:w"ay$h@a

" These lines contain the macros that will be the actions
hello:    A hi therej@p
goodbye:  dd@p
multiply: yypkOjjoj@p
end:      dd

Breakdown:
starting in the left split
0y$l   -> yank the line you're on and jump to the right split
/^": -> perform a search for the line just lanked followed by a colon
f:w"ay$  -> yank the text after the colon into reg a
h@a    -> go to the left split and perform reg a
