 -> Escaping:
    -> The escape character is '\'
    -> When writing pattern matches in machines,
    -> you need to escape the following chars:
       -> \*(){:

 -> Variables:
    -> c = [c]ommand
    -> s = [s]tate
    -> m = read/write [m]ode

 -> Macros:
    -> t = [t]uring (run a turing command, assuming [i]nitialize has been called
    -> i = [i]nitialize and load all necessary macros
    -> e = [e]scape the [c]ommand
    -> j = [j]ump to command (in the .turing file)
    -> r = [r]ead command (in the .turing file
    -> l = [l]oop

 -> Variable Macros:
    -> y = [y]ank command (used to read the state, set by [m]ode)
    -> a = motion used to [a]dvance the tape
    -> w = [w]rite command

= reg i (for initialize)
GoWRITE-CMDS-LINE ( ):%s/\n*WRITE-CMDS\S\+\s(\_[^)]\+)//GoWRITE-CMDS-LINE (SKIP  : o0ECDEL   : oddECWRITE : `pl"wyi"f"wmpGo0CVTECECh"wpINS   : `pl"wyi"f"wmpGooVTECECh"wp)GoMOTION-CMDS-LINE ( ):%s/\n*MOTION-CMDS\S\+\s(\_[^)]\+)//GoMOTION-CMDS-LINE (UP   : k@lDWN  : j@lHLD  : 0@lSTOP : 0)GoGoEC"cpI*EC:s/\([*\\]\)/\\\\\\\1/gCR0xxxxI(EC:s/\([(){:]\)/\\\\\1/gCR0xxxI.EC:s/\([.[\]/^$]\)/\\\1/gCR0xx"cd$dd"eddGo/^D2s\s\+{\_[^}]\{-}\(\\\@<!(\*)\|\\\@<!(D2c\(\\\\\)*)\).*\s:\s\+\zs\_[^}]*}CR"jddGo"wyewmp/^WRITE-CMDS-D2m\s(\_[^)]*D2w.*\s:\s\+\zs\_[^)]*)CR"wy$G@w"wdd`p"ayewmp/^MOTION-CMDS-D2m\s(\_[^)]*D2a.*\s:\s\+\zs\_[^)]*)CR"ay$`p"syE"rddGo@yEBl@e@j@rEBh@w@a"lddGompOEC0d$iSTARTEC0"sdEiLINEEC0"md$i0"cy$EC0"yd$dd`p@l"tdd

=BEGIN
  -> WRITE-CMD blocks
  -> there are multiple blocks of the form "WRITE-CMD-{read/write [m]ode}"
  -> there is double escaping going on whenever you see ^KVT

     -> first write out an empty block
GoWRITE-CMDS-LINE ( )
     -> delete all write-cmd blocks
:%s/              -> begin match over whole file
\n*               -> include empty lines ahead of block
WRITE-CMDS\S\+\s( -> beginning of all write-cmd blocks
\_[^)]\+          -> any non-closing paren (including new lines)
)                 -> closing block and new line
//              -> substitue for nothing
     -> write out the write-cmd group
        -> header
GoWRITE-CMDS-LINE (
        -> skip cmd
SKIP  : o0EC        -> write out "0"
        -> del cmd
DEL   : oddEC       -> write out "dd"
        -> write cmd
WRITE : `p                -> header plus jump to mark p
l"wyi"                    -> yank what is in quotes to reg w
f"wmp                     -> go to the next instruction, mark place
Go                        -> bottom of file begin writing
0CVTECEC              -> write out a macro that replaces text with nothing
h"wp                    -> alter the macro so it replaces text with reg w
        -> ins cmd
        -> comments moster same as write cmd above
INS   : `p
l"wyi"
f"wmp
Go
oVTECEC               -> new line instead of replacing old line
h"wp
        -> close block
)

  -> MOTION-CMD block
  -> there are multiple blocks of the form "MOTION-CMD-{read/write [m]ode}"
  -> there is double escaping going on whenever you see ^KVT
     -> first write out an empty block
GoMOTION-CMDS-LINE ( )
     -> delete all write-cmd blocks
     -> most comments match above
:%s/
\n*
MOTION-CMDS\S\+\s( -> beginning of block
\_[^)]\+           -> any non-closing paren (including new lines)
)                  -> closing block
//               -> substitue for nothing
     -> write out the motion-cmd-line group
        -> header
GoMOTION-CMDS-LINE (
        -> up cmd
UP   : k@l
        -> down cmd
DWN  : j@l
        -> hold cmd
HLD  : 0@l
        -> stop cmd
STOP : 0
)

  -> MACRO E
  -> escape the command that has been read from the tape
  -> We need to escape the triple escapes first, so that all
  -> the other escapes don't keep getting re-escaped
  -> Characters that should have triple escapes: *\
  -> Characters that should have double escapes: (){:
  -> Characters that should have single escapes: .[]/^$
Go            -> begin writing the macro
GoEC           -> insert an empty line at the end of the file
"cp              -> put out the command
                 -> escape the triple escape characters
I*EC              -> insert a * at the beginning of the line
:s/
\([*\\]\)           -> look for special characters
/\\\\\\\1/g         -> put two slashes in front of any matches
CR
0xxxx               -> delete the '///*' (now) at the beginning of the line
                 -> escape the double escape characters
I(EC              -> insert a paren at the beginning of the line
:s/
\([(){:]\)          -> look for special characters
/\\\\\1/g           -> put two slashes in front of any matches
CR
0xxx                -> delete the '//(' (now) at the beginning of the line
                 -> escape the single escape characters
I.EC              -> insert a '.' at the beginning of the line
:s/
\([.[\]/^$]\)       -> look for special characters
/\\\1/g             -> put a slash in front of any matches
CR                -> execute the search
0xx                 -> delete the '\.' (now) at the beginning of the line
"cd$             -> yank the line into reg c
dd               -> remove the extra line we've added
"edd        -> finish writing and load macro

  -> MACRO J
  -> jump to the state containing your command
  -> or fail if it doesn't exist
Go            -> begin writing
/                -> start search
^D2s\s\+{      -> line starting with [state] {
\_[^}]\{-}       -> as few as possible characters excluding '}'
\(               -> begin a sub match of either...
\\\@<!(\*)          -> a splat wrapped in parentheses
\|                     -> or
                    -> the command wrapped in parentheses
\\\@<!(                -> opening paren without escape
D2c                  -> the contents of reg c
\(\\\\\)*)             -> a paren escaped either no times, or a multiple of two times
\)               -> end submatch
.*\s:\s\+        -> the colon surrounded by white space
                 -> NOTE that we don't include new lines here
                 -> i.e. the colon has to occur on the same line
\zs              -> start the match after the colon (so we jump right to it)
\_[^}]*          -> no closing braces
}                -> a closing brace starting a line
CR             -> enter (to execute the search)
"jdd        -> finish writing and load macro


  -> MACRO R
  -> Load part w (for write)

Go            -> begin writing
  -> read the write cmd
"wye             -> load command (temporarily) into reg w
wmp              -> advance to next command, mark place

  -> search for macro related to write-cmd
/                -> start search
^WRITE-CMDS-     -> only look in the write cmds...
D2m            -> ...matching the read-write mode
\s(
\_[^)]*          -> no closing parens
D2w            -> the matching command
.*\s:\s\+        -> the colon separating the commands
\zs              -> begin match (so we jump after the colon
\_[^)]*          -> make sure the command occurs before any closing paren
)CR            -> complete search

  -> load cmd into w
"wy$             -> yank that macro (temporarily) into w
G@w              -> go to the bottom, call temp w
"wdd             -> finally load into w

  -> load part a for [a]dvance tape
`p               -> return to where we left off
"aye             -> load command (temporarily) into reg a
wmp              -> advance to next command, mark place

  -> search for macro related to motion-cmd
  -> (same comments as write-cmd above)
/
^MOTION-CMDS-
D2m
\s(
\_[^)]*
D2a
.*\s:\s\+
\zs
\_[^)]*
)CR

  -> load the actual motion
"ay$

  -> load the state
`p               -> return to place
"syE             -> load state

"rdd        -> finish writing and load macro

  -> MACRO L
  -> the main loop of the interpreter
Go            -> begin writing
@y               -> [y]ank from the tape into [c]
EBl            -> go to the turing instructions
@e               -> [e]scape the [c]ommand
@j               -> [j]ump instructions based on [s],[c] and [m]
@r               -> [r]ead the instructions based on [c]
EBh            -> go to the tape
@w               -> [w]rite to the tape
@a               -> [a]dvance the tape
"ldd        -> finish writing and load macro

  -> MACRO T
  -> set the inital state and call the main loop
Go            -> begin writing
mp               -> mark cursor position so we can return to it
                 -> set up initial variables
                    -> make sure smart indent won't screw us up
OEC                  -> write out an empty line
0d$                    -> make sure there are no leading spaces
                    -> load initial [s]tate
iSTARTEC             -> write out the start state
0"sdE                  -> load the start state in s
                    -> load initial read/write [m]ode
iLINEEC
0"md$
                    -> load the initial [y]ank macro
i
0"cy$                  -> yank the whole line into c
EC
0"yd$
dd               -> clean up from loading variables
`p               -> return to initial position
@l               -> run the main loop
"tdd        -> finish writing and load macro

=END
